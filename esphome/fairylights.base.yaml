
bk72xx:
  board: generic-bk7231n-qfn32-tuya
  framework:
    version: 0.0.0
    source: 'https://github.com/libretiny-eu/libretiny.git#eed39c9cfb75e287bd1c4f746b54112144269939'    # use newest LibreTiny version, as some PWM things have changed
    options:
      LT_UART_DEFAULT_PORT: 1     # output ESPHome log messages on UART1 (upload UART)

external_components:
  # - source: 
  #     type: local
  #     path: components
  #   components: [lt_hbridge]
  - source: github://patagonaa/tuya-ir-string-lights
    components: [lt_hbridge]

binary_sensor:
  - platform: gpio
    id: button
    name: Button
    pin:
      number: P6
      inverted: true
      mode:
        input: true
        pullup: true

text_sensor:
  - platform: template
    name: "IR Receiver"
    id: ir_receiver_sensor
    lambda: 'return {""};'
    update_interval: 60s

remote_receiver:
  id: ir_receiver
  pin:
    number: P16
    inverted: true
    mode:
      input: true
      pulldown: true
  dump: pioneer
  on_pioneer: 
    then:
      - text_sensor.template.publish:
          id: ir_receiver_sensor
          state: !lambda '
            switch(x.rc_code_1){
              case 0x0045:
                return "On";
              case 0x0046:
                return "Timer";
              case 0x0047:
                return "Off";
              case 0x0044:
                return "Mode 1";
              case 0x0043:
                return "Mode 2";
              case 0x0007:
                return "Mode 3";
              case 0x0009:
                return "Mode 4";
              case 0x0016:
                return "Mode 5";
              case 0x000D:
                return "Mode 6";
              case 0x000C:
                return "Mode 7";
              case 0x005E:
                return "Mode 8";
              case 0x0008:
                return "Dim Down";
              case 0x005A:
                return "Dim Up";
              default:
                return "";
            }
            '
      - delay: 100ms
      - text_sensor.template.publish:
          id: ir_receiver_sensor
          state: !lambda 'return "";'

light:
  - platform: lt_hbridge
    name: "Light"
    pin_a: P7     # outputs need to be on different PWM groups (P6/7: G0, P8/9: G1, P24/29: G2)
    pin_b: P8
    # default_transition_length: 0.5s
    # gamma_correct: 1.0
    # constant_brightness: true
    id: hb_light
    effects:
      #- random: # https://github.com/esphome/issues/issues/5241
      - pulse:
          update_interval: 4s
          transition_length: 4s
          max_brightness: 78%   # 50% with gamma, maximum of both groups lit at the same time
      - lambda:
          name: Fade Between
          update_interval: 5s
          lambda: |-
            static int state = 0;
            auto call = id(hb_light).turn_on();
            call.set_transition_length(5000);
            //id(hb_light).set_gamma_correct(1.0);
            if (state == 0) {
              call.set_warm_white(1.0);
              call.set_cold_white(0.0);
            } else if (state == 1) {
              call.set_warm_white(0.0);
              call.set_cold_white(1.0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state >= 2)
              state = 0;
      - lambda:
          name: Fade Single
          update_interval: 2s
          lambda: |-
            static int state = 0;
            auto call = id(hb_light).turn_on();
            call.set_transition_length(2000);
            //id(hb_light).set_gamma_correct(1.0);
            if (state == 0) {
              call.set_warm_white(1.0);
              call.set_cold_white(0.0);
            } else if (state == 1) {
              call.set_warm_white(0.0);
              call.set_cold_white(0.0);
            } else if (state == 2) {
              call.set_warm_white(0.0);
              call.set_cold_white(1.0);
            } else if (state == 3) {
              call.set_warm_white(0.0);
              call.set_cold_white(0.0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state >= 4)
              state = 0;
      - lambda:
          name: Flicker Between
          update_interval: 0.2s
          lambda: |-
            static int state = 0;
            auto call = id(hb_light).turn_on();
            call.set_transition_length(0);
            //id(hb_light).set_gamma_correct(1.0);
            if (state == 0) {
              call.set_warm_white(1.0);
              call.set_cold_white(0.0);
            } else if (state == 1) {
              call.set_warm_white(0.0);
              call.set_cold_white(1.0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state >= 2)
              state = 0;
      